I"Ç<p>Me encontr√© con un caso particular en el que un usuario pod√≠a tener uno de dos tipos de roles(alumno o profesor), los dos deb√≠an hacer login desde el mismo endpoint y para registrarse lo hac√≠an con los mismos datos(correo, nombre y apellidos), la diferencia entre estos sucede al llenar un perfil correspondiente a su rol, por ejemplo: de uno guardamos su cuota mensual y del otro las horas de trabajo.</p>

<p>Para cubrir estos requerimientos con un modelo NoSQL encontr√© la siguiente soluci√≥n como lo que mejor se acomoda al resultado requerido:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">UserSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">email</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
  <span class="na">password</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
  <span class="na">name</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span> 
  <span class="na">lastname</span><span class="p">:</span> <span class="nb">String</span>
  <span class="na">role</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">.</span><span class="nx">Types</span><span class="p">.</span><span class="nx">ObjectId</span><span class="p">,</span>
    <span class="na">refPath</span><span class="p">:</span> <span class="dl">'</span><span class="s1">roleType</span><span class="dl">'</span>
  <span class="p">},</span>
  <span class="na">roleType</span><span class="p">:{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
    <span class="na">enum</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">Teacher</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">Student</span><span class="dl">'</span><span class="p">]</span>
  <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>
<p>Siendo roleType el tipo de rol(el cual a su vez es el nombre del modelo que guardar√° la informaci√≥n extra) y role el ObjectId correspondiente a la colecci√≥n a la que se hace referencia.
Con esta soluci√≥n fue necesario crear dos modelos extra para guardar los datos de los roles especificados en el roleType.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">StudentRoleSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">birthDate</span><span class="p">:</span> <span class="nb">Date</span><span class="p">,</span>
  <span class="na">tutor</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
  <span class="na">annualEnrollment</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
  <span class="na">monthlyTuition</span><span class="p">:</span> <span class="nb">Number</span>
<span class="p">});</span>
</code></pre></div></div>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">TeacherRoleSchema</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">weeklyTotalHours</span><span class="p">:</span> <span class="nb">Number</span><span class="p">,</span>
  <span class="na">contract</span><span class="p">:</span> <span class="nb">String</span>
<span class="p">});</span>
</code></pre></div></div>
<p>Para utilizar este modelo, se puede seguir el c√≥digo siguiente:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">updateStudentRole</span> <span class="o">=</span> <span class="k">async</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">updateObj</span> <span class="o">=</span> <span class="p">{</span><span class="na">birthDate</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2018-10-04</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">tutor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Someone</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">annualEnrollment</span><span class="p">:</span> <span class="mi">1500</span><span class="p">,</span>
    <span class="na">monthlyTuition</span><span class="p">:</span> <span class="mi">1200</span>
  <span class="p">};</span>

  <span class="kd">let</span> <span class="nx">user</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">User</span><span class="p">.</span><span class="nx">findById</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
  <span class="kd">let</span> <span class="nx">studentRole</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">StudentRole</span><span class="p">.</span><span class="nx">findOneAndUpdate</span><span class="p">({</span>
    <span class="na">_id</span><span class="p">:</span> <span class="nx">user</span><span class="p">.</span><span class="nx">role</span>
  <span class="p">},</span> <span class="nx">updateObj</span><span class="p">);</span>
  
  <span class="kd">const</span> <span class="nx">student</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">Student</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">updateObj</span><span class="p">);</span>
  
  <span class="nx">user</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">User</span><span class="p">.</span><span class="nx">findByIdAndUpdate</span><span class="p">(</span><span class="nx">args</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">role</span><span class="p">:</span> <span class="nx">student</span><span class="p">.</span><span class="nx">id</span>
  <span class="p">},</span> <span class="p">{</span><span class="na">new</span><span class="p">:</span> <span class="kc">true</span><span class="p">});</span>
  
  <span class="k">return</span> <span class="nx">user</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>
<p>De esta manera se pueden guardar o actualizar los datos espec√≠ficos del rol y en caso de que un estudiante pase a ser profesor. Su rol puede ser actualizado sin tener que generar un nuevo usuario.</p>
:ET