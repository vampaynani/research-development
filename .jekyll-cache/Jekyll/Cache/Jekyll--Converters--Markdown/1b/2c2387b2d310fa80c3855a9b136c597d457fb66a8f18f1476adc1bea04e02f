I"ﬂ'<p>Ejemplo de una clase de lista ligada con 4 m√©todos b√°sicos, <em>push</em>, <em>insertAfter</em>, <em>delete</em> y <em>print</em>. Utiliza una clase nodo para guardar los datos de cada uno de los items en ella.</p>

<h3 id="clase-node">Clase <em>Node</em></h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* Javascript program to delete a node from linked list */</span>
<span class="kd">class</span> <span class="nx">Node</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">next</span><span class="o">=</span><span class="kc">null</span><span class="p">){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">next</span><span class="p">;</span>
  <span class="p">}</span>
 <span class="p">}</span>
</code></pre></div></div>

<h3 id="clase-linked-list">Clase <em>Linked List</em></h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">LinkedList</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(){</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">//Insert a new node at the beginning</span>
  <span class="nx">push</span><span class="p">(</span><span class="nx">newData</span><span class="p">){</span>
    <span class="cm">/* 1. allocate new node and put in the data  */</span>
    <span class="kd">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nx">newData</span><span class="p">);</span>
    <span class="cm">/* 2. Make next of new node as head */</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">head</span><span class="p">;</span>
    <span class="cm">/* 3. move the head to point to the new node */</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
    <span class="cm">/* 4. return the inserted node in case you need it later */</span>
    <span class="k">return</span> <span class="nx">node</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="cm">/* Given a node prevNodeData, insert a new node after the given prevNode */</span>
  <span class="nx">insertAfter</span><span class="p">(</span><span class="nx">prevNode</span><span class="p">,</span> <span class="nx">newData</span><span class="p">)</span> <span class="p">{</span>
    <span class="cm">/*1. check if the given prevNode is NULL */</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">prevNode</span> <span class="o">===</span> <span class="kc">null</span><span class="p">){</span>
      <span class="k">throw</span> <span class="dl">'</span><span class="s1">the given previous node cannot be null</span><span class="dl">'</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="cm">/* 2. allocate new node and put in the data  */</span>
    <span class="kd">const</span> <span class="nx">node</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Node</span><span class="p">(</span><span class="nx">newData</span><span class="p">);</span> 
    <span class="cm">/* 3. Make next of new node as next of prevNode */</span>
    <span class="nx">node</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">prevNode</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span> 
    <span class="cm">/* 4. move the next of prev_node as new_node */</span>
    <span class="nx">prevNode</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">node</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">delete</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
    <span class="c1">// Store head node</span>
    <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">head</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">prev</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
    <span class="c1">// If head node itself holds the key to be deleted</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">temp</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">temp</span><span class="p">.</span><span class="nx">data</span> <span class="o">===</span> <span class="nx">data</span><span class="p">){</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">head</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
        <span class="k">delete</span> <span class="nx">temp</span><span class="p">;</span>
        <span class="k">return</span><span class="p">;</span> 
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="cm">/* Search for the key to be deleted, keep track of the
     * previous node as we need to change 'prev.next'
     */</span>
    <span class="k">while</span><span class="p">(</span><span class="nx">temp</span> <span class="o">!==</span> <span class="kc">null</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="nx">temp</span><span class="p">.</span><span class="nx">data</span> <span class="o">===</span> <span class="nx">data</span><span class="p">){</span>
        <span class="k">break</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">prev</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">;</span>
      <span class="nx">temp</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// if key was not present in linked list</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">temp</span> <span class="o">===</span> <span class="kc">null</span><span class="p">){</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// Unlink the node from linked list</span>
    <span class="nx">prev</span><span class="p">.</span><span class="nx">next</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
    <span class="k">delete</span> <span class="nx">temp</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nx">print</span><span class="p">(){</span>
    <span class="kd">let</span> <span class="nx">temp</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">head</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">tempStr</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
    <span class="k">while</span><span class="p">(</span><span class="nx">temp</span><span class="p">){</span>
      <span class="nx">tempStr</span> <span class="o">+=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">temp</span><span class="p">.</span><span class="nx">data</span><span class="p">}</span><span class="s2">-&gt;`</span><span class="p">;</span>
      <span class="nx">temp</span> <span class="o">=</span> <span class="nx">temp</span><span class="p">.</span><span class="nx">next</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">tempStr</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h3 id="implementaci√≥n">Implementaci√≥n</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">llist</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LinkedList</span><span class="p">();</span>
<span class="nx">llist</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">node</span> <span class="o">=</span> <span class="nx">llist</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="nx">llist</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
<span class="nx">llist</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="nx">llist</span><span class="p">.</span><span class="nx">insertAfter</span><span class="p">(</span><span class="nx">node</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
<span class="nx">llist</span><span class="p">.</span><span class="k">delete</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>

<span class="nx">llist</span><span class="p">.</span><span class="nx">print</span><span class="p">();</span>
</code></pre></div></div>
:ET